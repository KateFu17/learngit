#在/Users/katefu/learngit下创建一个文件并且进入该文件
mkdir learngit
#初始化一个Git仓库，使用这个命令！出现了一个.git的东东
git init
#添加文件到Git仓库
git add <file> #可以一次加好几个，可反复多次使用，添加多个文件
git commit -m <message> # message里面可以添加改动的信息 -m后面输入的是本次提交的说明
#自动配置了姓名和电子邮件 电脑的用户名和主机名 设置这些东西：
# git config --global --edit
# 做了这步之后，用下列方法修正本次提交使用的身份
# git commit --amend --reset-author

#用这个命令可以让我们掌握仓库当前的状态
git status
#这个命令可以看看具体修改了什么内容
git diff
#使用add后可以再用git status看仓库的状态，让自己放心~
git add <file>
git commit -m "add 2 sentences"

#查看自己提交的版本，文件的一些信息
git log
git log --pretty=oneline #可以精简输出信息

#HEAD指向的版本就是当前的版本，git可以让我们在不同的版本之间穿梭？但是可以针对某个文件的修改而穿梭吗？还是只能有一个，刚刚想恢复readme结果恢复了另一个，就很尴尬
git reset --hard commit_id
#可以用git log查看提交历史，确定要回去的版本，精简输出可以用git log --pretty=oneline
git log
#重新回到“未来”的版本，可以用git relog查看历史命令
git relog

#撤销修改
#未git add至stage前，可以用git restore readme.txt将文本恢复至上一个版本
git restore readme.txt#直接丢弃工作区的修改
#常用git status搞清楚现在的状态
#已经用git add后，可以用git restore --staged readme.txt将文件从stage里取出来
git restore --stage readme.txt #添加到了暂存区想丢弃修改，先撤回到工作区再用上个命令丢弃工作区的修改

#删除文件
#再文件管理器中移除文件
rm test.txt
git status #可以看到删除了什么文件
#确实从版本库中删除文件则
git rm test.txt
git commit -m “remove test.txt”
#删除错误时，假如已经提交过版本库，可以把误删的文件恢复到最新版本

#远程仓库
# 用户主目录是 ~ ！可以用ls -al ~/.ssh看有没有密钥文件
# 如果没有可以创建 ssh-keygen -t rsa -C "youremail@example.com"
# id_rsa是私钥 id_rsa.pub 是公钥
# 复制公钥 复制这个文件里内容到clipboard
pbcopy < ~/.ssh/id_rsa.pub
# create a new repository on the command line GitHub上的命令行教学
echo "# learngit" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main #这个好像是指定branch？第一次没做这一步导致了报错
git remote add origin https://github.com/KateFu17/learngit.git
git push -u origin main #-u 第一次推送main分支的所有内容
# 现在只要本地提交了，就可以通过命令将最新的修改推送至GitHub
git push origin main

#远程库克隆
# https，也可以用ssh，https比较慢，ssh比较快
# 克隆一个仓库，先知道仓库的地址，然后使用git clone
git clone git@github.com:michaelliao/gitskills.git

#分支管理
# 创建分支
git branch <name>
# 创建分支并切换到该分支
git switch -c dev
#切换到已有分支
git switch dev
# 可以在该分支中改东西并且提交
git branch #查看分支
# 把dev分支的工作成果合并到main分支上
git merge dev #fast-forward合并的快进模式
# 合并后可以删除分支
git branch -d dev
git branch

#解决冲突 无法自动合并分支时
#解决方法就是合并失败的地方手动编辑为统一内容，再提交
# 可以看到分支合并详情
git log --graph --pretty=oneline --abbrev-commit

# 分支管理策略
# --no-ff参数表示禁用Fast forward，普通模式合并，可以看出曾经做过合并
git merge --no-ff -m "merge with no-ff" dev
# main分支平时不在上面干活，一般在dev上，可以和小伙伴在dev分支上干活，时不时合并到dev上

# Bug分支
# 出现bug的时候，可以建立临时分支来修复，修复后合并分支，再将临时分支删除。但是可能你正在进行的工作还未完成，没法提交，git可以让你把当前的工作现场储存起来，等恢复现场后继续工作
git stash
git status
# 查看工作区，可以看到工作区是干净的，可以放心地创建分支修复bug
# 假如在main分支上修复，就从main创建临时分支
git checkout main
git checkout -b issue-101
# 修复后，切换到main分支，并完成合并，最后删除issue-101分支
git switch main
git merge --no-ff -m "merged bug fix 101" issue-101
# 回到dev分支干活
git switch dev
git status
# 找刚才的工作现场
git stash list
# 两种方法
git stash apply #方法一，恢复后stash内容并不删除，需要git stash drop来删除
git stash pop #方法二，恢复的同时把stash内容也删除了
git stash list
#可以多次stash，恢复的时候用git stash list查看，恢复指定的stash
git stash apply stash@{0}

# 将同样的修改复制到别的分支上
cherry-pick #能复制一个特定的提交到当前分支
git status #看是否在需要改动的分支上
git cherry-pick 4c805e2 #之前改动的特定的提交

# Feature分支
# 创建一个feature分支
git switch -c feature-vulcan
#添加一个文件
git add vulcan.py
git status
git commit -m "add feature vulcan"
git switch dev #准备合并
git branch -d feature-vulcan #为啥我的没有报错 挠头 可能是我哪里做错了GG
#主要是看强行删除命令
git branch -D feature-vulcan

# 多人协作
# 查看远程库的信息
git remote
# 详细信息 git remote -v
# 推送分支
git push origin main #推送其他分支 git push origin dev
# 抓取分支
# git pull把最新的提交从origin/dev抓下来，在本地合并，解决冲突再推送
# 需设置本地dev和远程origin/dev分支的链接
git branch --set-upstream-to=origin/dev dev
git pull
#工作模式
#1.首先，可以试图用git push origin <branch-name>推送自己的修改；
#2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
#3.如果合并有冲突，则解决冲突，并在本地提交；
#4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
#如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

# rebase
